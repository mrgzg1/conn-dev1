#ifndef WEB_FILES_H
#define WEB_FILES_H

const char index_html[] = "<!DOCTYPE html>\n<html>\n<head>\n    <title>Sensor Dashboard</title>\n    <!-- Add React, ReactDOM, and Babel -->\n    <script src=\"https://unpkg.com/react@17/umd/react.development.js\"></script>\n    <script src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\"></script>\n    <script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n    <!-- Add Chart.js before our app -->\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <!-- Load our scripts -->\n    <script type=\"text/babel\" src=\"chart.js\"></script>\n    <script type=\"text/babel\" src=\"react_app.js\"></script>\n</head>\n<body>\n    <div id=\"root\"></div>\n</body>\n</html>\n";
const char react_app_js[] = "const deviceIP = location.origin;\n\nconst App = () => {\n  const [sensorData, setSensorData] = React.useState({ reading: 0, leds: { red: false, green: false, blue: false } });\n  const [readings, setReadings] = React.useState([]);\n  const chartRef = React.useRef(null);\n\n  const toggleLED = async (color, state) => {\n    const command = `${color}${state ? 'H' : 'L'}`; // Fixed to send H to turn on, L to turn off\n    console.log(`Sending LED command: ${command}`);\n    try {\n      await fetch(`${deviceIP}/${command}`);\n      // Update LED state immediately for better UX\n      setSensorData(prev => ({\n        ...prev,\n        leds: {\n          ...prev.leds,\n          [color === 'R' ? 'red' : color === 'G' ? 'green' : 'blue']: state\n        }\n      }));\n    } catch (err) {\n      console.error('Error toggling LED:', err);\n    }\n  };\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await fetch(`${deviceIP}/sensor`);\n        const data = await res.json();\n        setSensorData(prev => ({\n          ...data,\n          leds: {\n            red: data.leds.red,\n            green: data.leds.green, \n            blue: data.leds.blue\n          }\n        }));\n        \n        // Update readings array with new sensor value\n        setReadings(prev => {\n          const newReadings = [...prev, data.reading].slice(-50); // Keep last 50 readings\n          return newReadings;\n        });\n      } catch (err) {\n        console.error('Error fetching sensor data:', err);\n      }\n    };\n\n    fetchData();\n    const interval = setInterval(fetchData, 1000); // Poll every second to keep LED states in sync\n    return () => clearInterval(interval);\n  }, []);\n\n  // Effect for updating chart\n  React.useEffect(() => {\n    if (chartRef.current && readings.length > 0) {\n      const ctx = chartRef.current.getContext('2d');\n      if (window.chartInstance) {\n        window.chartInstance.destroy();\n      }\n      window.chartInstance = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: readings.map((_, i) => i),\n          datasets: [{\n            label: 'Sensor Reading',\n            data: readings,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              beginAtZero: true,\n              max: 1024 // Max value for analog read\n            }\n          }\n        }\n      });\n    }\n  }, [readings]);\n\n  return (\n    <div>\n      <h1>Sensor Dashboard</h1>\n      <div style={{ width: '800px', height: '400px' }}>\n        <canvas ref={chartRef}></canvas>\n      </div>\n      <div style={{ marginTop: '20px' }}>\n        <button \n          onClick={() => toggleLED('R', !sensorData.leds.red)}\n          style={{\n            padding: '10px 20px',\n            margin: '0 10px',\n            backgroundColor: sensorData.leds.red ? 'red' : 'white',\n            color: sensorData.leds.red ? 'white' : 'black'\n          }}\n        >\n          Red LED {sensorData.leds.red ? 'ON' : 'OFF'}\n        </button>\n        <button \n          onClick={() => toggleLED('G', !sensorData.leds.green)}\n          style={{\n            padding: '10px 20px',\n            margin: '0 10px',\n            backgroundColor: sensorData.leds.green ? 'green' : 'white',\n            color: sensorData.leds.green ? 'white' : 'black'\n          }}\n        >\n          Green LED {sensorData.leds.green ? 'ON' : 'OFF'}\n        </button>\n        <button \n          onClick={() => toggleLED('B', !sensorData.leds.blue)}\n          style={{\n            padding: '10px 20px',\n            margin: '0 10px',\n            backgroundColor: sensorData.leds.blue ? 'blue' : 'white',\n            color: sensorData.leds.blue ? 'white' : 'black'\n          }}\n        >\n          Blue LED {sensorData.leds.blue ? 'ON' : 'OFF'}\n        </button>\n      </div>\n      <div style={{ marginTop: '20px' }}>\n        Current sensor value: {sensorData.reading}\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n";
const char chart_js[] = "let chartInstance = null;\n\nconst renderChart = (chartRef, data) => {\n  const ctx = chartRef.current.getContext(\"2d\");\n  \n  // Destroy existing chart if it exists\n  if (chartInstance) {\n    chartInstance.destroy();\n  }\n\n  chartInstance = new Chart(ctx, {\n    type: \"line\",\n    data: {\n      labels: Array.from({ length: data.length }, (_, i) => i),\n      datasets: [\n        { \n          label: \"Sensor Readings\",\n          data: data,\n          borderColor: \"blue\",\n          borderWidth: 2,\n          fill: false\n        }\n      ],\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: { \n          title: { display: true, text: \"Time\" }\n        },\n        y: { \n          title: { display: true, text: \"Value\" },\n          beginAtZero: true\n        }\n      },\n    },\n  });\n};\n  ";
#endif