#ifndef WEB_FILES_H
#define WEB_FILES_H

const char index_html[] = "<!DOCTYPE html>\n<html>\n<head>\n    <title>Sensor Dashboard</title>\n    <!-- Add React, ReactDOM, and Babel -->\n    <script src=\"https://unpkg.com/react@17/umd/react.development.js\"></script>\n    <script src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\"></script>\n    <script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n    <!-- Add Chart.js before our app -->\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <!-- Load our scripts -->\n    <script type=\"text/babel\" src=\"chart.js\"></script>\n    <script type=\"text/babel\" src=\"react_app.js\"></script>\n</head>\n<body>\n    <div id=\"root\"></div>\n</body>\n</html>\n";

const char react_app_js[] = "const deviceIP = location.origin;\n\nconst App = () => {\n  const [sensorData, setSensorData] = React.useState({ reading: 0, leds: { red: 0, green: 0, blue: 0 } });\n  const [readings, setReadings] = React.useState([]);\n  const [selectedLED, setSelectedLED] = React.useState('red');\n  const [isDrawing, setIsDrawing] = React.useState(false);\n  const [sequences, setSequences] = React.useState({\n    red: Array(50).fill(0),\n    green: Array(50).fill(0),\n    blue: Array(50).fill(0)\n  });\n  \n  const sequenceChartRef = React.useRef(null);\n  const chartRef = React.useRef(null);\n  let sequenceChart = null;\n\n  // Send PWM value to LED\n  const setPWM = async (color, value) => {\n    const colorCode = color[0].toUpperCase(); // Get first letter capitalized\n    try {\n      await fetch(`${deviceIP}/PWM${colorCode}${value}`);\n      setSensorData(prev => ({\n        ...prev,\n        leds: {\n          ...prev.leds,\n          [color]: value\n        }\n      }));\n    } catch (err) {\n      console.error('Error setting PWM:', err);\n    }\n  };\n\n  // Handle drawing on the sequence chart\n  const handleChartClick = (event) => {\n    if (!sequenceChart) return;\n    \n    const rect = sequenceChartRef.current.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    \n    const xValue = sequenceChart.scales.x.getValueForPixel(x);\n    const yValue = sequenceChart.scales.y.getValueForPixel(y);\n    \n    if (xValue >= 0 && xValue < 50) {\n      const newSequences = { ...sequences };\n      newSequences[selectedLED][Math.floor(xValue)] = Math.min(Math.max(Math.round(yValue), 0), 100);\n      setSequences(newSequences);\n      updateSequenceChart();\n    }\n  };\n\n  // Play the sequence\n  const playSequence = async () => {\n    const duration = 5000; // 5 seconds\n    const steps = 50;\n    const stepDuration = duration / steps;\n    \n    for (let i = 0; i < steps; i++) {\n      await setPWM('red', sequences.red[i]);\n      await setPWM('green', sequences.green[i]);\n      await setPWM('blue', sequences.blue[i]);\n      await new Promise(resolve => setTimeout(resolve, stepDuration));\n    }\n    \n    // Turn off all LEDs at the end\n    await setPWM('red', 0);\n    await setPWM('green', 0);\n    await setPWM('blue', 0);\n  };\n\n  // Update sequence chart\n  const updateSequenceChart = () => {\n    if (!sequenceChartRef.current) return;\n    \n    if (sequenceChart) {\n      sequenceChart.destroy();\n    }\n\n    const ctx = sequenceChartRef.current.getContext('2d');\n    sequenceChart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: Array.from({length: 50}, (_, i) => (i / 10).toFixed(1)),\n        datasets: [\n          {\n            label: 'Red LED',\n            data: sequences.red,\n            borderColor: 'rgba(255, 0, 0, 0.8)',\n            backgroundColor: 'rgba(255, 0, 0, 0.1)',\n            borderWidth: selectedLED === 'red' ? 3 : 1,\n            tension: 0.1,\n            fill: true\n          },\n          {\n            label: 'Green LED',\n            data: sequences.green,\n            borderColor: 'rgba(0, 255, 0, 0.8)',\n            backgroundColor: 'rgba(0, 255, 0, 0.1)',\n            borderWidth: selectedLED === 'green' ? 3 : 1,\n            tension: 0.1,\n            fill: true\n          },\n          {\n            label: 'Blue LED',\n            data: sequences.blue,\n            borderColor: 'rgba(0, 0, 255, 0.8)',\n            backgroundColor: 'rgba(0, 0, 255, 0.1)',\n            borderWidth: selectedLED === 'blue' ? 3 : 1,\n            tension: 0.1,\n            fill: true\n          }\n        ]\n      },\n      options: {\n        responsive: true,\n        scales: {\n          y: {\n            beginAtZero: true,\n            max: 100,\n            title: {\n              display: true,\n              text: 'LED Power (%)'\n            }\n          },\n          x: {\n            title: {\n              display: true,\n              text: 'Time (seconds)'\n            }\n          }\n        },\n        plugins: {\n          title: {\n            display: true,\n            text: 'LED Sequence Editor - Click to Draw'\n          }\n        }\n      }\n    });\n  };\n\n  // Initialize sequence chart\n  React.useEffect(() => {\n    updateSequenceChart();\n  }, [selectedLED]);\n\n  // Handle mouse events for drawing\n  React.useEffect(() => {\n    const canvas = sequenceChartRef.current;\n    if (!canvas) return;\n\n    const handleMouseDown = (e) => {\n      setIsDrawing(true);\n      handleChartClick(e);\n    };\n\n    const handleMouseMove = (e) => {\n      if (isDrawing) {\n        handleChartClick(e);\n      }\n    };\n\n    const handleMouseUp = () => {\n      setIsDrawing(false);\n    };\n\n    canvas.addEventListener('mousedown', handleMouseDown);\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('mouseup', handleMouseUp);\n    canvas.addEventListener('mouseleave', handleMouseUp);\n\n    return () => {\n      canvas.removeEventListener('mousedown', handleMouseDown);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mouseup', handleMouseUp);\n      canvas.removeEventListener('mouseleave', handleMouseUp);\n    };\n  }, [isDrawing, selectedLED]);\n\n  return (\n    <div>\n      <h1>LED Sequence Editor</h1>\n      <div style={{ width: '800px', height: '400px', marginBottom: '20px' }}>\n        <canvas ref={sequenceChartRef}></canvas>\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <button \n          onClick={() => setSelectedLED('red')}\n          style={{\n            padding: '10px 20px',\n            margin: '0 10px',\n            backgroundColor: selectedLED === 'red' ? 'red' : 'white',\n            color: selectedLED === 'red' ? 'white' : 'black'\n          }}\n        >\n          Edit Red LED\n        </button>\n        <button \n          onClick={() => setSelectedLED('green')}\n          style={{\n            padding: '10px 20px',\n            margin: '0 10px',\n            backgroundColor: selectedLED === 'green' ? 'green' : 'white',\n            color: selectedLED === 'green' ? 'white' : 'black'\n          }}\n        >\n          Edit Green LED\n        </button>\n        <button \n          onClick={() => setSelectedLED('blue')}\n          style={{\n            padding: '10px 20px',\n            margin: '0 10px',\n            backgroundColor: selectedLED === 'blue' ? 'blue' : 'white',\n            color: selectedLED === 'blue' ? 'white' : 'black'\n          }}\n        >\n          Edit Blue LED\n        </button>\n      </div>\n      <div style={{ marginBottom: '20px' }}>\n        <button \n          onClick={playSequence}\n          style={{\n            padding: '10px 20px',\n            margin: '0 10px',\n            backgroundColor: '#4CAF50',\n            color: 'white',\n            fontSize: '16px'\n          }}\n        >\n          Play Sequence\n        </button>\n        <button \n          onClick={() => {\n            setSequences({\n              red: Array(50).fill(0),\n              green: Array(50).fill(0),\n              blue: Array(50).fill(0)\n            });\n            updateSequenceChart();\n          }}\n          style={{\n            padding: '10px 20px',\n            margin: '0 10px',\n            backgroundColor: '#f44336',\n            color: 'white',\n            fontSize: '16px'\n          }}\n        >\n          Clear All\n        </button>\n      </div>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n";

const char chart_js[] = "let chartInstance = null;\n\nconst renderChart = (chartRef, data) => {\n  const ctx = chartRef.current.getContext(\"2d\");\n  \n  // Destroy existing chart if it exists\n  if (chartInstance) {\n    chartInstance.destroy();\n  }\n\n  chartInstance = new Chart(ctx, {\n    type: \"line\",\n    data: {\n      labels: Array.from({ length: data.length }, (_, i) => i),\n      datasets: [\n        { \n          label: \"Sensor Readings\",\n          data: data,\n          borderColor: \"blue\",\n          borderWidth: 2,\n          fill: false\n        }\n      ],\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        x: { \n          title: { display: true, text: \"Time\" }\n        },\n        y: { \n          title: { display: true, text: \"Value\" },\n          beginAtZero: true\n        }\n      },\n    },\n  });\n};\n  ";

#endif
